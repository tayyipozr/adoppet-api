// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  hash     String
  hashedRt String?

  firstName String?
  lastName  String?
  gender    Boolean?
  token     String?

  addressId Int?

  pets      Pet[]
  adopts    Adopt[]
  favorites Favorite[]
  posts     Post[]

  Address Address[]
  @@map("users")
}

model Pet {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name        String
  description String?
  age         Int?
  height      Float?
  weight      Float?

  genderId Int    @db.SmallInt
  gender   Gender @relation(fields: [genderId], references: [id], onDelete: Cascade)

  typeId Int
  type   Type @relation(fields: [typeId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  adopts    Adopt[]
  favorites Favorite[]
  posts     Post[]
  imageUrls PetImage[]

  @@map("pets")
}

model Adopt {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  petId Int
  pet   Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  adoptionProcessId Int
  adoptionProcess   AdoptionProcess @relation(fields: [adoptionProcessId], references: [id], onDelete: Cascade)

  @@map("adopts")
}

model Favorite {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  petId Int
  pet   Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([userId, petId])
  @@map("favorites")
}

model Post {
  id Int @id @default(autoincrement())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title     String
  content   String?
  imageUrls String[]

  petId Int
  pet   Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@unique([userId, petId])
  @@map("posts")
}

model Type {
  id Int @id @default(autoincrement())

  type String @unique
  pets Pet[]

  @@map("categories")
}

model Gender {
  id Int @id @default(autoincrement()) @db.SmallInt

  gender String @unique @db.VarChar(6)
  pets   Pet[]
}

model Address {
  id Int @id @default(autoincrement())

  countryId Int
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  cityId Int
  city   City @relation(fields: [cityId], references: [id], onDelete: Cascade)

  districtId Int
  district   District @relation(fields: [districtId], references: [id], onDelete: Cascade)

  locationId Int
  Location   Location? @relation(fields: [locationId], references: [id], onDelete: Cascade)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Country {
  id Int @id @default(autoincrement())

  name      String    @unique
  cities    City[]
  addresses Address[]
}

model City {
  id Int @id @default(autoincrement())

  countryId Int
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)

  name      String     @unique
  districts District[]
  adresses  Address[]
}

model District {
  id Int @id @default(autoincrement())

  name String

  cityId   Int
  City     City      @relation(fields: [cityId], references: [id], onDelete: Cascade)
  adresses Address[]
}

model Location {
  id Int @id @default(autoincrement())

  lat Float
  lng Float

  adresses Address[]
}

model AdoptionProcess {
  id Int @id @default(autoincrement()) @db.SmallInt

  status String @unique @db.VarChar(15)

  Adopt Adopt[]
  @@map("adoption_processes")
}

model PetImage {
  id Int @id @default(autoincrement())

  petId Int
  pet   Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  url String @unique
}
